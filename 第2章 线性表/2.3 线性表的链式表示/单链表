//定义
typedef struct LNode
{
    ElemType data;
    struct LNode* next;
}LNode, * LinkList;

//初始化（不带头结点）
bool InitList(LinkList &L)
{
    L=NULL;
    return true;
}

void test()
{
    LinkList L;
    InitList(L);
    ...
}


//判断单链表是否为空
bool Empty(LinkList L)
{
    return(L==NULL);
}


//初始化（带头结点）
bool InitList(LinkList &L)
{
    L=(LNode*)malloc(sizeof(LNode));
    if(L==NULL){
        return false;
    }
    L->next=NULL;
    return true;
}


//判断单链表是否为空（头结点）
bool Empty(LinkList L)
{
    return(L->next==NULL);
}


//按位序插入（带头结点）
bool ListInsert(LinkList &L, int i, int e)
{
    if(i<1){
        return false
    }
    LNode* p;
    int j=0;
    p=L;
    while(p!=NULL && j<i-1){
        p=p->next;
        j++;
    }
    if(p==NULL)
        return false;
    LNode* s=(LNode*)malloc(sizeof(LNode))
    s->data=e;
    s->next=p->next;
    p->next=s;
    return true;
}


//按位序插入（不带头结点）
bool ListInsert(LinkList &L, ElemType e)
{
    if(i<1){
        return false;
    }
    if(i==1){
        LNode* s=(LNode*)malloc(sizeof(LNode));
        s->data=e;
        s->next=L;
        L=s;
        return true;
    }
    LNode* p;
    int j=1;
    p=L;
    while(p!=NULL && j<i-1){
        p=p->next;
        j++;
    }
    if (p=NULL){
        return false;
    }
    LNode* s=(LNode*)malloc(sizeof(LNode));
    s->data=e;
    s->next=p->next;
    p->next=s;
    rerurn true;
}


//指定结点的后插操作
bool InsertNextNode(LNode* p, ELemType e)
{
    if(p==NULL){
        return false;
    }
    LNode* s=(LNode*)malloc(sizeof(LNode));
    if(s==NULL){
        return false;
    }
    s->data=e;
    s->next=p->next;
    p->next=s;
    return true;
}


//指定结点的前插操作
bool InsertPriorNode(LNode* p, ElemType e)
{
    if(p=NULL){
        return false;
    }
    LNode* s=(LNode*)malloc(sizeof(LNode);
    if(s=NULL){
        return false;
    }
    s->next=p->next;
    p->next=s;
    s->data=p->data;
    p->data=e;
    return true;
}
bool InsertPriorNode(LNode* p, LNode* s)
{
    if(p=NULL){
        return false;
    }
    LNode* s=(LNode*)malloc(sizeof(LNode));
    if(s=NULL){
        return false;
    }
    s->next=p->next;
    p->next=s;
    ElemType temp=P->data;
    p->data=s->data;
    s->data=temp;
    return true;
}


//按位序删除（带头结点）
bool ListDelete(LNode* &L, int i; ElemType &e)
{
    if(i<1){
        return false;
    }
    LNode* p=L;
    int j=0;
    while(p!=NULL && j<i-1){
        p=p->next;
        j++
    }
    if(p=NULL || p->next=NULL){
        return false;
    }
    LNode* q=p->next;
    p->next=q->next;
    e=q->data;
    free(q);
    return e;
}


//指定结点的删除
bool DeleteNode(LNode* p)
{
    if(p=NULL){
        return false;
    }
    LNode* q=p->next;
    p->next=q->next;
    p->data=q->data;;
    free(p);
    return true;
}


//按位查找
LNode* GetElem(LinkList L, int i)
{
    if(i<1){
        return false;
    }
    LNode* p=L;
    int j=0;
    while(p!=NULL && j<i-1){
    p=p->next;
    j++;
    }
    return p;
}


//按值查找
LNode* LocateElem(LNode* L, ElemType e)
{
    LNode* p=L->next;
    while(p!=NULL && P->data!=e){
        p=p->next;
    return p;
}


//尾插法建立单链表
//普通的
typedef struct LNode
{
    ElemType data;
    struct LNode* next;
}LNode, * LinkList;

bool InitList(LinkList &L)
{
    L=(LNode*)malloc(sizeof(LNode));
    if(L==NULL){
        return false;
    L->next=NULL;
}

void test()
{
    LinkList L;
    InitList L;
    ...
}

//尾插法
LinkList List_TailInsert(LinkList &L)
{
    int x;
    scanf("%d\n", &x);
    L=(LinkList)malloc(sizeof(LNode));
    LNode* s, * r=L;
    while(x!=9999){
        s=(LNode*)malloc(sizeof(LNode));
        s->data=x;
        r->next=s;
        r=s;
        scanf("%d\n", x);
    }
    r->next=NULL;
    return L;
}

 
//头插法建立单链表
LinkList List_HeadInsert(LinkList &L)
{
    int x;
    scanf("%d\n", x);
    L=(LinkList)malloc(sizeof(LNode*));
    LNode* s;
    L->next=NULL;
    while(x!=9999){
        s=(LNode*)malloc(sizeof(LNode));
        s->data=x;
        s->next=L->next;
        L->next=s;
        scanf("d\n", x);
    }
    return L;
}
